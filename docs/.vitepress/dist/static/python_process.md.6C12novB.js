import{_ as d,c as e,o as a,ag as o}from"./chunks/framework.CWeRABzr.js";const P=JSON.parse('{"title":"进程","description":"","frontmatter":{},"headers":[],"relativePath":"python/process.md","filePath":"python/process.md","lastUpdated":1740737974000}'),p={name:"python/process.md"};function r(i,t,l,h,c,n){return a(),e("div",null,t[0]||(t[0]=[o('<h1 id="进程" tabindex="-1">进程 <a class="header-anchor" href="#进程" aria-label="Permalink to &quot;进程&quot;">​</a></h1><p>定义：进程是操作系统分配资源（如内存、CPU 时间等）的基本单位。每个进程都有独立的内存空间，进程之间的数据不共享。</p><p>并行：多进程可以实现真正的并行计算，因为每个进程可以运行在不同的 CPU 核心上。</p><p>进程间通信（IPC）：由于进程之间是隔离的，Python 提供了多种方式来实现进程间通信，如队列（Queue）、管道（Pipe）、共享内存（Value、Array）等。</p><p>进程的生命周期：</p><ul><li><p>创建：通过 <code>multiprocessing.Process()</code> 创建进程对象。</p></li><li><p>启动：调用 <code>start()</code> 方法启动进程，进程开始执行 <code>target</code> 指定的函数。</p></li><li><p>运行：进程执行其任务。</p></li><li><p>终止：进程完成任务后自动终止，或者通过调用 <code>join()</code> 方法等待进程结束。</p></li></ul><h1 id="线程" tabindex="-1">线程 <a class="header-anchor" href="#线程" aria-label="Permalink to &quot;线程&quot;">​</a></h1><p>线程：线程是进程中的一个执行单元。一个进程可以包含多个线程，这些线程共享进程的内存空间（如全局变量、堆内存等），但每个线程有自己的栈空间。</p><p>并发：线程允许程序在同一时间内执行多个任务，尽管在单核 CPU 上它们并不是真正的同时运行，而是通过快速切换来实现并发。</p><p>全局解释器锁（GIL）：在 Python 中，由于 GIL 的存在，同一时刻只有一个线程可以执行 Python 字节码。这意味着在多核 CPU 上，Python 的多线程并不能真正实现并行计算，但对于 I/O 密集型任务（如文件读写、网络请求等），多线程仍然可以提高效率。</p><p>线程的生命周期：</p><ul><li><p>创建：通过 <code>threading.Thread()</code> 创建线程对象。</p></li><li><p>启动：调用 <code>start()</code> 方法启动线程，线程开始执行 <code>target</code> 指定的函数。</p></li><li><p>运行：线程执行其任务。</p></li><li><p>阻塞：线程可能会因为 I/O 操作、锁、条件变量等原因进入阻塞状态。</p></li><li><p>终止：线程完成任务后自动终止，或者通过调用 <code>join()</code> 方法等待线程结束。</p></li></ul><p>GIL 限制：由于 GIL 的存在，Python 的多线程不适合 CPU 密集型任务（如大量计算），因为同一时刻只有一个线程可以执行 Python 字节码。对于 CPU 密集型任务，建议使用多进程（multiprocessing 模块）。</p><p>线程同步：由于多个线程共享同一进程的内存空间，可能会出现竞态条件（Race Condition）。为了避免这种情况，可以使用同步机制，如锁（Lock）、信号量（Semaphore）、条件变量（Condition）等。</p><h1 id="协程" tabindex="-1">协程 <a class="header-anchor" href="#协程" aria-label="Permalink to &quot;协程&quot;">​</a></h1><p>协程：协程是一种用户态的轻量级线程，由程序员显式控制调度。它可以在执行过程中暂停（await）并将控制权交还给事件循环，等待某个操作完成后再恢复执行。</p><p>异步非阻塞：协程通过异步非阻塞的方式执行任务，避免了线程切换的开销，适合处理大量 I/O 操作。</p><p>事件循环（Event Loop）：协程的运行依赖于事件循环，事件循环负责调度和执行协程。</p><p>运行机制：</p><ul><li><p>事件循环：协程的运行依赖于事件循环。事件循环负责调度和执行协程，并在协程遇到 await 时暂停当前协程，转而执行其他协程。</p></li><li><p>await：当协程遇到 await 时，它会暂停当前协程的执行，并将控制权交还给事件循环，直到 await 后面的操作完成。</p></li><li><p>非阻塞：协程通过异步非阻塞的方式执行任务，避免了线程切换的开销。</p></li></ul><p>可以使用 <code>asyncio.gather</code> 或 <code>asyncio.create_task</code> 来并发执行多个协程。</p><h1 id="三者之间的区别" tabindex="-1">三者之间的区别 <a class="header-anchor" href="#三者之间的区别" aria-label="Permalink to &quot;三者之间的区别&quot;">​</a></h1><table tabindex="0"><thead><tr><th>特性</th><th>进程</th><th>线程</th><th>协程</th></tr></thead><tbody><tr><td>并发方式</td><td>多进程并发</td><td>多线程并发</td><td>单线程内并发</td></tr><tr><td>资源开销</td><td>较大（独立内存空间）</td><td>较小（内核态调度）</td><td>极小（用户态调度）</td></tr><tr><td>适用场景</td><td>CPU 密集型任务</td><td>I/O 密集型任务</td><td>I/O 密集型任务</td></tr><tr><td>并行性</td><td>真正的并行（多核 CPU）</td><td>受 GIL 限制，无法真正并行（Python 中）</td><td>单线程内并发，无法利用多核</td></tr><tr><td>通信方式</td><td>进程间通信（IPC）</td><td>直接共享内存</td><td>直接共享内存</td></tr></tbody></table><p>想象你是一个小老板，开了一家小店。你需要完成很多任务，比如卖东西、打扫卫生、进货等。</p><p>进程：就像你开了一家新店，这家店有自己的钱、货架和员工。每家店都是独立的，互相不影响。</p><p>线程：就像你店里的员工，他们可以同时做不同的事情（比如一个卖东西，一个打扫卫生），但他们共用店里的资源（比如钱和货架）。</p><p>协程：就像你是一个超级员工，你可以快速切换任务（比如先卖东西，然后马上打扫卫生，再回来卖东西），但你只有一个人，只是做事特别快。</p><table tabindex="0"><thead><tr><th>特性</th><th>进程</th><th>线程</th><th>协程</th></tr></thead><tbody><tr><td>是什么</td><td>一家新店，完全独立</td><td>店里的员工，共用资源</td><td>超级员工，快速切换任务</td></tr><tr><td>资源</td><td>有自己的钱、货架和员工</td><td>共用店里的资源（钱、货架）</td><td>只有一个人，但做事特别快</td></tr><tr><td>开销</td><td>开新店很贵（占用资源多）</td><td>雇员工比较便宜（占用资源少）</td><td>超级员工最便宜（几乎不占资源）</td></tr><tr><td>适合任务</td><td>需要完全独立的任务（比如开分店）</td><td>可以同时做很多事情（比如卖东西和打扫）</td><td>需要快速切换的小任务（比如接电话）</td></tr><tr><td>并行性</td><td>真正的并行（可以同时开很多店）</td><td>受限制（员工之间会抢资源）</td><td>单线程内快速切换，不能真正并行</td></tr></tbody></table>',28)]))}const u=d(p,[["render",r]]);export{P as __pageData,u as default};
