import{_ as s,c as n,o as p,ag as e}from"./chunks/framework.C-XYIjD8.js";const u=JSON.parse('{"title":"基础语法","description":"","frontmatter":{},"headers":[],"relativePath":"python/basic.md","filePath":"python/basic.md","lastUpdated":null}'),t={name:"python/basic.md"};function l(i,a,o,r,d,c){return p(),n("div",null,a[0]||(a[0]=[e(`<h1 id="基础语法" tabindex="-1">基础语法 <a class="header-anchor" href="#基础语法" aria-label="Permalink to &quot;基础语法&quot;">​</a></h1><p>在 Python 中，使用缩进表示语句块的开始和结束，增加缩进表示语句块的开始，减少缩进表示语句块的结束。</p><h2 id="注释" tabindex="-1">注释 <a class="header-anchor" href="#注释" aria-label="Permalink to &quot;注释&quot;">​</a></h2><p>什么时候注释？</p><ul><li><p>文件注释</p></li><li><p>函数注释</p></li></ul><p>当然注释不是越多越好，对于一目了然的代码，不需要添加注释</p><p><strong>注释的类型</strong></p><ul><li>单行注释（#）</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>url = f&#39;https://www.douyin.com/search/{keyword}&#39; # 请求链接</span></span></code></pre></div><ul><li>多行注释（一对连续的三个引号，单双引号都可以）</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&quot;&quot;&quot;</span></span>
<span class="line"><span>抖音热门视频爬虫模块</span></span>
<span class="line"><span>用于搜索和获取抖音平台上的热门视频信息</span></span>
<span class="line"><span>&quot;&quot;&quot;</span></span></code></pre></div><ul><li>文档字符串（Docstring）</li></ul><blockquote><p>文档字符串是多行字符串，通常用于模块、函数、类或方法的说明。它被包裹在三引号（&quot;&quot;&quot; 或 &#39;&#39;&#39;）中，并且是代码的一部分（可以通过 <strong>doc</strong> 属性访问）。</p></blockquote><ul><li>特殊注释</li></ul><p>在脚本的第一行使用 <code>#!</code> 指定解释器路径，通常用于 Unix/Linux 系统。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#!/usr/bin/env python3</span></span></code></pre></div><p>编码声明注释，在 Python 2 中，需要在文件开头声明编码格式（Python 3 默认使用 UTF-8，通常不需要）</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># -*- coding: utf-8 -*-</span></span></code></pre></div><p>TODO 注释</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># TODO: 优化这个函数的性能</span></span></code></pre></div><p>常用的格式化工具：</p><ul><li><p>Autopep8 是一个流行的 Python 代码格式化工具，它基于 PEP 8 规范自动格式化代码。</p></li><li><p>Black 是一个严格的代码格式化工具，它遵循自己的代码风格规范，强调一致性。</p></li><li><p>Pylint 是一个功能强大的代码检查工具，支持代码格式化和代码质量检查。</p></li></ul><h2 id="标识符" tabindex="-1">标识符 <a class="header-anchor" href="#标识符" aria-label="Permalink to &quot;标识符&quot;">​</a></h2><p>标识符是用于给变量、函数、类、模块和其他对象命名的名称，标识符可以由字母（大写或小写）、数字和下划线（_）组成，标识符不能以数字开头。</p><ul><li><p>变量和函数名：通常使用小写字母，单词之间用下划线分隔，这种命名方式称为蛇形命名法（snake_case）。</p></li><li><p>类名：通常使用大写字母开头的单词，每个单词首字母大写，不使用下划线分隔，这种命名方式称为驼峰命名法（CamelCase）。</p></li><li><p>常量名：通常使用全大写字母，单词之间用下划线分隔。</p></li></ul><table tabindex="0"><thead><tr><th>类型</th><th>实例</th><th>备注</th></tr></thead><tbody><tr><td>单下划线开头</td><td>_abc</td><td>私有化属性或方法，通过 <code>from M import *</code> 将不能导入</td></tr><tr><td>单下划线结尾</td><td>abc_</td><td>避免与关键字重复</td></tr><tr><td>双下划线开头</td><td>__abc</td><td>避免与子类中的属性名冲突，无法在外部直接访问</td></tr><tr><td>双下划线开头和结尾</td><td><strong>abc</strong></td><td>魔法对象或者属性</td></tr></tbody></table><h2 id="逻辑运算符" tabindex="-1">逻辑运算符 <a class="header-anchor" href="#逻辑运算符" aria-label="Permalink to &quot;逻辑运算符&quot;">​</a></h2><p>and：只有当所有操作数都为 True 时，结果才为 True；否则结果为 False。</p><p>or：要有一个操作数为 True，结果就为 True；否则结果为 False。</p><p>not：对布尔值取反。如果操作数为 True，结果为 False；反之亦然。</p><p>Python 的逻辑运算符具有短路特性：</p><p>对于 and：如果第一个操作数为 False，则不会计算第二个操作数，直接返回 False。</p><p>对于 or：如果第一个操作数为 True，则不会计算第二个操作数，直接返回 True。</p><p>逻辑运算符的优先级从高到低为：not and or</p><h2 id="布尔值" tabindex="-1">布尔值 <a class="header-anchor" href="#布尔值" aria-label="Permalink to &quot;布尔值&quot;">​</a></h2><p>True：等同于 1</p><p>False：等同于 0</p><p>非零数字、非空字符串、非空列表等会被转换为 True。</p><p>零、空字符串、空列表等会被转换为 False。</p><h2 id="循环" tabindex="-1">循环 <a class="header-anchor" href="#循环" aria-label="Permalink to &quot;循环&quot;">​</a></h2><p>for in：创建 for 循环</p><p>while：创建 while 循环</p><p>continue：继续循环的下一个迭代</p><p>break：跳出当前循环</p><p>else 可以在循环正常结束后执行一段代码（如果循环被 break 打断，则不会执行）</p><h2 id="类与函数" tabindex="-1">类与函数 <a class="header-anchor" href="#类与函数" aria-label="Permalink to &quot;类与函数&quot;">​</a></h2><p>class：定义一个类</p><p>def：定义一个函数</p><p>lambda：创建匿名函数</p><p>return：退出函数并返回值</p><p>yield：结束函数并返回生成器</p><h2 id="条件语句" tabindex="-1">条件语句 <a class="header-anchor" href="#条件语句" aria-label="Permalink to &quot;条件语句&quot;">​</a></h2><p>if elif else：创建条件语句</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>x = 3</span></span>
<span class="line"><span>if x &gt; 5:</span></span>
<span class="line"><span>    print(&quot;x 大于 5&quot;)</span></span>
<span class="line"><span>elif x &gt; 0:</span></span>
<span class="line"><span>    print(&quot;x 大于 0 但小于等于 5&quot;)</span></span>
<span class="line"><span>else:</span></span>
<span class="line"><span>    print(&quot;x 小于等于 0&quot;)</span></span></code></pre></div><p>assert：用于检查某个条件是否为 True。如果条件为 False，则会引发 AssertionError 异常，并可选地输出错误信息。它通常用于调试和验证程序的正确性。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>assert x &gt; 5, &quot;x 必须大于 5&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 等价于</span></span>
<span class="line"><span>if not x &gt; 5:</span></span>
<span class="line"><span>    raise AssertionError(&quot;x 必须大于 5&quot;)</span></span></code></pre></div><h2 id="异常" tabindex="-1">异常 <a class="header-anchor" href="#异常" aria-label="Permalink to &quot;异常&quot;">​</a></h2><p>try：用于包裹可能会引发异常的代码</p><p>except：用于捕获并处理 try 块中发生的异常</p><p>else：只有在 try 块中的代码没有引发任何异常时才会执行</p><p>finally：无论 try 块中的代码是否引发异常，finally 块中的代码都会执行。它通常用于释放资源或执行清理操作</p><p>raise：手动引发异常</p><p>with：用于简化资源管理，特别是文件操作、网络连接、数据库连接等需要显式释放资源的场景。它通过上下文管理器（Context Manager）自动处理资源的获取和释放，确保资源在使用完毕后被正确清理，即使发生异常也不会遗漏。减少了冗余的 try-finally 代码块。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>try:</span></span>
<span class="line"><span>    result = 10 / 0</span></span>
<span class="line"><span>except ZeroDivisionError:</span></span>
<span class="line"><span>    print(&#39;除零错误&#39;)</span></span>
<span class="line"><span>else:</span></span>
<span class="line"><span>    print(&#39;计算结果&#39;,result)</span></span>
<span class="line"><span>finally:</span></span>
<span class="line"><span>    print(&quot;无论是否发生异常，都会执行&quot;)</span></span></code></pre></div><h2 id="模块" tabindex="-1">模块 <a class="header-anchor" href="#模块" aria-label="Permalink to &quot;模块&quot;">​</a></h2><p>form M import as W：从模块中导入指定部分并创建别名</p>`,66)]))}const b=s(t,[["render",l]]);export{u as __pageData,b as default};
