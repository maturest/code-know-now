import{_ as n,c as s,o as e,ag as t}from"./chunks/framework.CWeRABzr.js";const u=JSON.parse('{"title":"为何选择 Python","description":"","frontmatter":{},"headers":[],"relativePath":"python/index.md","filePath":"python/index.md","lastUpdated":1740737974000}'),p={name:"python/index.md"};function i(l,a,o,c,d,h){return e(),s("div",null,a[0]||(a[0]=[t(`<h1 id="为何选择-python" tabindex="-1">为何选择 Python <a class="header-anchor" href="#为何选择-python" aria-label="Permalink to &quot;为何选择 Python&quot;">​</a></h1><blockquote><p>每个开发语言有各自擅长领域和使用场景，PHP 和 Python 并不完全互斥，甚至可以相互搭配，PHP 专注与 Web 开发，Python 专注于数据分析，机器学习和人工智能等等。当然 Pyhon 也可用于 Web 开发，可以借助 PyPy 或者 CPython 解释器加快运行速度，甚至可以借助 Jython 直接调用 Java 的各种类库。</p></blockquote><h2 id="安装-python" tabindex="-1">安装 Python <a class="header-anchor" href="#安装-python" aria-label="Permalink to &quot;安装 Python&quot;">​</a></h2><h3 id="anaconda" tabindex="-1">Anaconda <a class="header-anchor" href="#anaconda" aria-label="Permalink to &quot;Anaconda&quot;">​</a></h3><p>平常我们经常会遇到这种情况：一台电脑（服务器）要跑 <code>python</code> 的多个项目，但项目依赖的 <code>python</code> 的版本不一致，就像前端 <code>node</code> 那样，那么有没有像 <code>nvm</code> 那样管理 <code>node</code> 版本的管理器呢，答案是有的，他就是 <code>anaconda </code> ，俗称大蟒蛇，<a href="https://mirrors.tuna.tsinghua.edu.cn/" target="_blank" rel="noreferrer">清华大学开源软件镜像站</a>可以加速下载，它包含了包管理器、环境管理器和 Python 发行版，包含众多开源包。</p><h3 id="conda" tabindex="-1"><a href="https://docs.conda.io/projects/conda/en/stable/index.html" target="_blank" rel="noreferrer">conda</a> <a class="header-anchor" href="#conda" aria-label="Permalink to &quot;[conda](https://docs.conda.io/projects/conda/en/stable/index.html)&quot;">​</a></h3><blockquote><p>Conda provides package, dependency, and environment management for any language.</p></blockquote><p>conda 是包及其依赖项和环境的管理工具。如果你需要的包要求不同版本的 Python ，你无需切换到不同的环境，因为 conda 同样是一个环境管理器。仅需要几条命令，你可以创建一个完全独立的环境来运行不同的 Python 版本，同时继续在你常规的环境中使用你常用的 Python 版本。</p><h3 id="pip" tabindex="-1">pip <a class="header-anchor" href="#pip" aria-label="Permalink to &quot;pip&quot;">​</a></h3><p>pip 是用于安装和管理软件包的包管理器。</p><h4 id="conda-与-pip-的区别" tabindex="-1">conda 与 pip 的区别 <a class="header-anchor" href="#conda-与-pip-的区别" aria-label="Permalink to &quot;conda 与 pip 的区别&quot;">​</a></h4><p>pip:</p><ul><li><p>不一定会展示所需其他依赖包。</p></li><li><p>安装包时或许会直接忽略依赖项而安装，仅在结果中提示错误。</p></li></ul><p>conda:</p><ul><li><p>列出所需其他依赖包。</p></li><li><p>安装包时自动安装其依赖项。</p></li><li><p>可以便捷地在包的不同版本中自由切换。</p></li><li><p>conda结合了pip和virtualenv的功能。</p></li><li><p>pip仅适用于python, conda适用于Python, R, Ruby, Lua, Scala, Java, JavaScript, C/C++, FORTRAN。</p></li></ul><h3 id="virtualenv" tabindex="-1">VirtualEnv <a class="header-anchor" href="#virtualenv" aria-label="Permalink to &quot;VirtualEnv&quot;">​</a></h3><p>VirtualEnv 是用于创建一个独立的 Python 环境的工具。VirtualEnv 将会为它自己的安装目录创建一个环境，这并不与其他 VirtualEnv 环境共享库；同时也可以选择性地不连接已安装的全局库。</p><p>它解决一下问题：</p><ul><li><p>当一个程序需要使用 Python 2.7 版本，而另一个程序需要使用 Python 3.6 版本，如何同时使用这两个程序？如果将所有程序都安装在系统下的默认路径，如：/usr/lib/python2.7/site-packages，当不小心升级了本不该升级的程序时，将会对其他的程序造成影响。</p></li><li><p>如果想要安装程序并在程序运行时对其库或库的版本进行修改，都会导致程序的中断。</p></li><li><p>在共享主机时，无法在全局 site-packages 目录中安装包。</p></li></ul><h3 id="python-都安装了什么" tabindex="-1">Python 都安装了什么？ <a class="header-anchor" href="#python-都安装了什么" aria-label="Permalink to &quot;Python 都安装了什么？&quot;">​</a></h3><p>1、python 解释器</p><p>2、pip 包管理器，管理一些扩展包（安装目录为 lib/site-packages）</p><p>3、python 标准库，Lib 文件夹</p><h2 id="安装-anaconda" tabindex="-1">安装 Anaconda <a class="header-anchor" href="#安装-anaconda" aria-label="Permalink to &quot;安装 Anaconda&quot;">​</a></h2><p>很简单，点击下载 exe 文件，然后进行一步一步安装即可。不过安装之后，需要更换一下镜像源，这样会加快包的下载安装速度。在用户目录下，编辑 <code>.condarc</code>文件，替换为以下内容。（Windows 用户无法直接创建名为 .condarc 的文件，可先执行 conda config --set show_channel_urls yes 生成该文件之后再修改。）</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>channels:</span></span>
<span class="line"><span>  - defaults</span></span>
<span class="line"><span>show_channel_urls: true</span></span>
<span class="line"><span>default_channels:</span></span>
<span class="line"><span>  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span></span>
<span class="line"><span>  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r</span></span>
<span class="line"><span>  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2</span></span>
<span class="line"><span>custom_channels:</span></span>
<span class="line"><span>  conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span></span>
<span class="line"><span>  msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span></span>
<span class="line"><span>  bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span></span>
<span class="line"><span>  menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span></span>
<span class="line"><span>  pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span></span>
<span class="line"><span>  pytorch-lts: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span></span>
<span class="line"><span>  simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span></span>
<span class="line"><span>  deepmodeling: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/</span></span></code></pre></div><p>替换完以上内容之后，运行 <code>conda clean -i</code> 清除索引缓存，保证用的是镜像站提供的索引。</p><h3 id="conda-环境管理" tabindex="-1"><a href="https://docs.conda.io/projects/conda/en/stable/commands/index.html" target="_blank" rel="noreferrer">conda 环境管理</a> <a class="header-anchor" href="#conda-环境管理" aria-label="Permalink to &quot;[conda 环境管理](https://docs.conda.io/projects/conda/en/stable/commands/index.html)&quot;">​</a></h3><ul><li>检测 conda 版本</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>conda --version</span></span></code></pre></div><ul><li>查看 conda 帮助信息</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>conda -h</span></span></code></pre></div><ul><li>创建新环境</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>conda create -n &lt;env_name&gt; &lt;package_names&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 如果要安装指定的版本号，则只需要在包名后面以 = 和版本号的形式执行,创建多个包，则直接以空格隔开</span></span>
<span class="line"><span>conda create -n python3 python=3.5 numpy pandas</span></span></code></pre></div><ul><li>切换环境</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// 激活环境</span></span>
<span class="line"><span>conda activate &lt;env_name&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 退出当前环境</span></span>
<span class="line"><span>conda deactivate</span></span></code></pre></div><ul><li>显示已创建环境</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>conda env list</span></span>
<span class="line"><span></span></span>
<span class="line"><span>conda info -e</span></span></code></pre></div><ul><li>删除环境</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>conda remove -n &lt;env_name&gt; --all</span></span></code></pre></div><h3 id="conda-包管理-curd" tabindex="-1"><a href="https://docs.conda.io/projects/conda/en/stable/commands/index.html" target="_blank" rel="noreferrer">conda 包管理（CURD）</a> <a class="header-anchor" href="#conda-包管理-curd" aria-label="Permalink to &quot;[conda 包管理（CURD）](https://docs.conda.io/projects/conda/en/stable/commands/index.html)&quot;">​</a></h3><ul><li>查询包</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>conda search</span></span></code></pre></div><ul><li>获取当前环境中已安装的包信息</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>conda list</span></span></code></pre></div><ul><li>在当前环境安装包</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>conda install &lt;package_name&gt;</span></span></code></pre></div><ul><li>指定环境安装包</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>conda install -n myenv numpy</span></span></code></pre></div><ul><li>当使用 conda install 无法进行安装时，可以使用 pip 进行安装</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pip install</span></span></code></pre></div><ul><li>从当前环境删除包</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>conda remove &lt;package_name&gt;</span></span></code></pre></div><ul><li>从指定环境删除包，多个包使用空格</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>conda remove -n myenv &lt;package_name&gt;</span></span></code></pre></div><ul><li>删除所有包和环境自己</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>conda remove -n myenv --all</span></span></code></pre></div><ul><li>软件包更新</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>conda update -n myenv &lt;package_name&gt;</span></span></code></pre></div><h2 id="编辑器配置" tabindex="-1">编辑器配置 <a class="header-anchor" href="#编辑器配置" aria-label="Permalink to &quot;编辑器配置&quot;">​</a></h2><h3 id="选择解释器" tabindex="-1">选择解释器 <a class="header-anchor" href="#选择解释器" aria-label="Permalink to &quot;选择解释器&quot;">​</a></h3><p>首先在编辑器扩展中安装 Python 扩展，之后按如下操作：</p><p>1、<code>ctrl+shift+P</code> 打开命令面板。</p><p>2、接着输入 <code>Python: Select Interpreter</code>。</p><p>3、然后选择对应环境的解释器。</p><h3 id="修改默认终端" tabindex="-1">修改默认终端 <a class="header-anchor" href="#修改默认终端" aria-label="Permalink to &quot;修改默认终端&quot;">​</a></h3><p>再环境准备完成之后，使用编辑器打开项目，在右上角调试运行文件的时候，会报错，形如 :</p><div class="danger custom-block"><p class="custom-block-title">报错内容</p><p>conda-script.py: error: argument COMMAND: invalid choice: &#39;activate&#39; (choose from &#39;clean&#39;, &#39;compare&#39;, &#39;config&#39;, &#39;create&#39;, &#39;info&#39;, &#39;init&#39;, &#39;install&#39;, &#39;list&#39;, &#39;notices&#39;, &#39;package&#39;, &#39;remove&#39;, &#39;uninstall&#39;, &#39;rename&#39;, &#39;run&#39;, &#39;search&#39;, &#39;update&#39;, &#39;upgrade&#39;, &#39;build&#39;, &#39;convert&#39;, &#39;debug&#39;, &#39;develop&#39;, &#39;doctor&#39;, &#39;index&#39;, &#39;inspect&#39;, &#39;metapackage&#39;, &#39;render&#39;, &#39;skeleton&#39;, &#39;repo&#39;, &#39;token&#39;, &#39;pack&#39;, &#39;env&#39;, &#39;server&#39;, &#39;content-trust&#39;, &#39;verify&#39;)</p></div><p>有的说是环境变量的问题，有的说是 <code>conda activate</code> 命令失效了，全特么扯淡。归结原因就是因为终端不是 <code>anaconda prompt</code>。那么就设置成该终端即可。</p><p>方案如下：</p><p>1、<code>ctrl+shift+P</code> 打开命令面板。</p><p>2、接着输入 <code>terminal:select default profile</code>。</p><p>3、然后选择 cmd 方式打开。</p>`,73)]))}const g=n(p,[["render",i]]);export{u as __pageData,g as default};
