import{_ as d,c as r,o as a,ag as e}from"./chunks/framework.CWeRABzr.js";const x=JSON.parse('{"title":"运算符","description":"","frontmatter":{},"headers":[],"relativePath":"python/operator.md","filePath":"python/operator.md","lastUpdated":1740737974000}'),h={name:"python/operator.md"};function o(l,t,n,i,p,b){return a(),r("div",null,t[0]||(t[0]=[e('<h1 id="运算符" tabindex="-1">运算符 <a class="header-anchor" href="#运算符" aria-label="Permalink to &quot;运算符&quot;">​</a></h1><p>在 Python 中，提供了多种类型的运算符，包括算术运算符，比较运算符，逻辑运算符，赋值运算符，位运算符，成员运算符和身份运算符等等。</p><h2 id="算术运算符" tabindex="-1">算术运算符 <a class="header-anchor" href="#算术运算符" aria-label="Permalink to &quot;算术运算符&quot;">​</a></h2><table tabindex="0"><thead><tr><th>运算符</th><th>描述</th><th>示例</th><th>结果</th></tr></thead><tbody><tr><td>+</td><td>加法</td><td>3 + 2</td><td>5</td></tr><tr><td>-</td><td>减法</td><td>5 - 3</td><td>2</td></tr><tr><td>*</td><td>乘法</td><td>2 * 3</td><td>6</td></tr><tr><td>/</td><td>除法</td><td>10 / 2</td><td>5.0</td></tr><tr><td>//</td><td>整除</td><td>10 // 3</td><td>3</td></tr><tr><td>%</td><td>取模</td><td>10 % 3</td><td>1</td></tr><tr><td>**</td><td>幂运算</td><td>2 ** 3</td><td>8</td></tr></tbody></table><h2 id="比较运算符" tabindex="-1">比较运算符 <a class="header-anchor" href="#比较运算符" aria-label="Permalink to &quot;比较运算符&quot;">​</a></h2><table tabindex="0"><thead><tr><th>运算符</th><th>描述</th><th>示例</th><th>结果</th></tr></thead><tbody><tr><td>==</td><td>等于</td><td>3 == 3</td><td>True</td></tr><tr><td>!=</td><td>不等于</td><td>3 != 2</td><td>True</td></tr><tr><td>&gt;</td><td>大于</td><td>5 &gt; 3</td><td>True</td></tr><tr><td>&lt;</td><td>小于</td><td>5 &lt; 3</td><td>False</td></tr><tr><td>&gt;=</td><td>大于或等于</td><td>5 &gt;= 5</td><td>True</td></tr><tr><td>&lt;=</td><td>小于或等于</td><td>5 &lt;= 3</td><td>False</td></tr></tbody></table><h2 id="逻辑运算符" tabindex="-1">逻辑运算符 <a class="header-anchor" href="#逻辑运算符" aria-label="Permalink to &quot;逻辑运算符&quot;">​</a></h2><table tabindex="0"><thead><tr><th>运算符</th><th>描述</th><th>示例</th><th>结果</th></tr></thead><tbody><tr><td>and</td><td>逻辑与</td><td>True and False</td><td>False</td></tr><tr><td>or</td><td>逻辑或</td><td>True or False</td><td>True</td></tr><tr><td>not</td><td>逻辑非</td><td>not True</td><td>False</td></tr></tbody></table><h2 id="赋值运算符" tabindex="-1">赋值运算符 <a class="header-anchor" href="#赋值运算符" aria-label="Permalink to &quot;赋值运算符&quot;">​</a></h2><table tabindex="0"><thead><tr><th>运算符</th><th>描述</th><th>示例</th><th>结果</th></tr></thead><tbody><tr><td>=</td><td>赋值</td><td>x = 5</td><td>x = 5</td></tr><tr><td>+=</td><td>加后赋值</td><td>x += 3</td><td>x = x + 3</td></tr><tr><td>-=</td><td>减后赋值</td><td>x -= 2</td><td>x = x - 2</td></tr><tr><td>*=</td><td>乘后赋值</td><td>x *= 2</td><td>x = x * 2</td></tr><tr><td>/=</td><td>除后赋值</td><td>x /= 2</td><td>x = x / 2</td></tr><tr><td>//=</td><td>整除后赋值</td><td>x //= 2</td><td>x = x // 2</td></tr><tr><td>%=</td><td>取模后赋值</td><td>x %= 2</td><td>x = x % 2</td></tr><tr><td>**=</td><td>幂运算后赋值</td><td>x **= 2</td><td>x = x ** 2</td></tr></tbody></table><h2 id="成员运算符" tabindex="-1">成员运算符 <a class="header-anchor" href="#成员运算符" aria-label="Permalink to &quot;成员运算符&quot;">​</a></h2><table tabindex="0"><thead><tr><th>运算符</th><th>描述</th><th>示例</th><th>结果</th></tr></thead><tbody><tr><td>in</td><td>存在于</td><td>3 in [1, 2, 3]</td><td>True</td></tr><tr><td>not in</td><td>不存在于</td><td>4 not in [1, 2, 3]</td><td>True</td></tr></tbody></table><h2 id="身份运算符" tabindex="-1">身份运算符 <a class="header-anchor" href="#身份运算符" aria-label="Permalink to &quot;身份运算符&quot;">​</a></h2><p>用于比较两个对象的内存地址（是否指向同一个对象）。</p><table tabindex="0"><thead><tr><th>运算符</th><th>描述</th><th>示例</th><th>结果</th></tr></thead><tbody><tr><td>is</td><td>是同一个对象</td><td>x is y</td><td>True/False</td></tr><tr><td>is not</td><td>不是同一个对象</td><td>x is not y</td><td>True/False</td></tr></tbody></table><p>运算符的优先级，从高到低的优先级顺序：</p><p>括号：()（最高优先级）</p><p>幂运算：**</p><p>按位取反：~</p><p>乘、除、取模、整除：* / % //</p><p>加、减：+ -</p><p>位移：&lt;&lt; &gt;&gt;</p><p>按位与：&amp;</p><p>按位异或：^</p><p>按位或：|</p><p>比较运算符：== != &gt; &lt; &gt;= &lt;=</p><p>身份运算符：is is not</p><p>成员运算符：in not in</p><p>逻辑运算符：not and or（最低优先级）</p><p>优先级速记口诀：</p><blockquote><p>括号幂，取反乘除，加减位移，与异或或，比较身份，成员非与或，赋值最后。</p></blockquote>',31)]))}const u=d(h,[["render",o]]);export{x as __pageData,u as default};
